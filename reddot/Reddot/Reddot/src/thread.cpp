
#include <windows.h>
#include "thread.h"

////////////////////////////////////////////////////////////////////////////////

bool thread_init(thread_t& t, thread_func_t func, void* param)
{
	DWORD id;
	t = ::CreateThread(NULL, 0, func, param, CREATE_SUSPENDED, &id);
	return t != NULL;
}

////////////////////////////////////////////////////////////////////////////////

bool thread_resume(thread_t& t)
{
	return ::ResumeThread(t) != 0xFFFFFFFF;
}

////////////////////////////////////////////////////////////////////////////////

bool thread_suspend(thread_t& t)
{
	return ::SuspendThread(t) != 0xFFFFFFFF;
}

////////////////////////////////////////////////////////////////////////////////

bool thread_join(thread_t& t)
{
	return ::WaitForSingleObject(t, INFINITE) == WAIT_OBJECT_0;
}

////////////////////////////////////////////////////////////////////////////////

bool thread_done(thread_t& t)
{
	return ::CloseHandle(t) == TRUE;
}

////////////////////////////////////////////////////////////////////////////////
